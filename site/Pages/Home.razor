@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@inject HttpClient Http


<FluentGrid Justify="JustifyContent.Center">
     <FluentGridItem xs="12" Justify="JustifyContent.Center">
        <PageTitle>Geneate Service Mocks</PageTitle>
    </FluentGridItem>

     <FluentGridItem xs="12" Justify="JustifyContent.Center">
    <h1>Generate Mocks for your services using AI</h1>
    </FluentGridItem>

     <FluentGridItem xs="0" md="3" Justify="JustifyContent.Center">
    </FluentGridItem>

     <FluentGridItem xs="12" md="6" Justify="JustifyContent.Center">
        <FluentTextField style="width: 100%" @bind-Value="info.Location">OpenApi Spec:</FluentTextField>
    </FluentGridItem>

     <FluentGridItem xs="0" md="3" Justify="JustifyContent.Center">
    </FluentGridItem>

    <FluentGridItem xs="12" Justify="JustifyContent.Center">
        <FluentButton Appearance="Appearance.Accent" @onclick="GetMock">Generate</FluentButton>
    </FluentGridItem>

     <FluentGridItem xs="0" md="3" Justify="JustifyContent.Center">
    </FluentGridItem>

    <FluentGridItem xs="12" md="6" Justify="JustifyContent.Center">
        <FluentCard style="width: 100%">
            <h2>Mock</h2>
            <FluentProgress @bind-Visible="RequestRunning"></FluentProgress>
                <p>@MessagePanelText</p>
        </FluentCard>
    </FluentGridItem>

     <FluentGridItem xs="0" md="3" Justify="JustifyContent.Center">
    </FluentGridItem>

</FluentGrid>

@code {
    public string ServiceName { get; set; }
    public string GithubUrl { get; set; }
    public string language = "csharp";
    public string MessagePanelText = "Click Generate to get a mock";

    public MockGeneratorInfo info = new MockGeneratorInfo();
    public bool RequestRunning { get; set; } = false;

    public async Task GetMock()
    {
        var timer = new PeriodicTimer(TimeSpan.FromSeconds(5));
        await Task.WhenAll(
            GetGeneratorResponseAndUpdateMessagePanel(timer),
            RunTimerAndPopulateMessagePanel(timer));
    }

    public async Task GetGeneratorResponseAndUpdateMessagePanel(PeriodicTimer timer)
    {
        try {
            RequestRunning = true;
            MessagePanelText = "Starting ...";
            var response = await Http.GetFromJsonAsync<MockGeneratorResponse>($"/api/generate?open-api-url={info.Location}");
            if (response.Error != null)
                MessagePanelText = response.Error;
            else 
                MessagePanelText = response.Response;
        } catch (Exception ex) {
            MessagePanelText = ex.Message;
        }
        finally {
            RequestRunning = false;
            timer.Dispose();
        }
    }

    public async Task RunTimerAndPopulateMessagePanel(PeriodicTimer timer)
    {
        var messagesStack = new Stack<string>(Messages);
        while (await timer.WaitForNextTickAsync())
        {
            if (messagesStack.Count > 0)
            {
                MessagePanelText = messagesStack.Pop();
                StateHasChanged();
            }
            else
                break;
        }
    }

    private List<string> Messages = new List<string> {
        "Generating Mocks",
        "Understanding OpenApi Spec",
        "Analzing Endpoints",
        "Finding APIs",
        "Got the document, now analyzing it ...",
        "Still downloading the OpenAPI document, please wait ...",
        "Downloading the OpenAPI document",
    };


    public class MockGeneratorInfo
    {
        [Required]
        public string ServiceName { get; set; }
        public string Location { get; set; }
        public string GithubUrl { get; set; }
        public string Language { get; set; }
    }

    public class MockGeneratorResponse
    {
        public string Response { get; set; }
        public string Error { get; set; }
    }
}